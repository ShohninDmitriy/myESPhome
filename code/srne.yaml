####################################### e-2-nomy video #62: https://youtu.be/wNnZ5kD8IdA  ###########

            ######Github :  https://github.com/SeByDocKy/ESPhome  ####

substitutions:
  updates: 5s
  name: srne
  tx_pin_uart: GPIO17
  rx_pin_uart: GPIO16
  modbus_adress: '1'
  baudrate: '9600'
 
esphome:
  name: ${name}
#  platformio_options:
#    build_flags: 
#      - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768 #16384 #8192 #16384 # #  
#    platform_packages:
#      - framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.2
#    platform:
#      - https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream  

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: 2.0.3 #2.0.5   #
    platform_version: 4.4.0  #5.2.0   #

logger:
  #level: DEBUG
  #level: verbose
  baud_rate: 0
   

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  password: "e24f57bcac31a2b3eca8da4c217185fc"

wifi:
  ssid: !secret esphome_ssid
  password: !secret esphome_password
  power_save_mode: high
  output_power: 8.5db

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "tracer_6420AN Fallback Hotspot"
    password: "sebydocky"
    
time:
  - platform: homeassistant
    id: homeassistant_time


    on_time:
    - seconds: 59
      minutes: 59
      hours: 23
      then:  

        - globals.set:
                id: pv_power_total_veille_global
                value: !lambda return ( id(pv_power_total_veille_global) =  float( id(pv_power_total_day).state) );         
                
        - globals.set:
                id: charging_power_total_veille_global
                value: !lambda return ( id(charging_power_total_veille_global) =  float( id(charging_power_total_day).state) );        


globals:
  - id: battery_coefficient
    type: int
    restore_value: yes

  - id: battery_reco_global
    type: int

  - id: current_load_charging_mode_global
    type: int

  - id: pv_power_total_veille_global
    type: float
    restore_value: yes
    
  - id: charging_power_total_veille_global
    type: float
    restore_value: yes

uart:
  id: uart_0
  tx_pin: ${tx_pin_uart}
  rx_pin: ${rx_pin_uart}
  baud_rate: ${baudrate}
  stop_bits: 1
  # debug:
    # direction: BOTH  
 
modbus:
  #flow_control_pin: 23
  send_wait_time: 200ms
  id: modbus_srne

modbus_controller:
  - id: srne
    ## the Modbus device addr
    address: ${modbus_adress}
    modbus_id: modbus_srne
    command_throttle: 200ms
    setup_priority: -10
    update_interval: ${updates}

binary_sensor:       
  - platform: status
    name: ${name}_status   
    
sensor:
  - platform: uptime
    id: uptime_sec

        #################### System Informations ##################

  - platform: modbus_controller
    modbus_controller_id: srne
    id: max_voltage_supported
    name: ${name}_max_voltage_supported
    address: 0x000A
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    unit_of_measurement: "V"
    skip_updates: 1 
    icon: mdi:sine-wave
    bitmask: 0xFF00 #(Bits 15-8)

  - platform: modbus_controller
    modbus_controller_id: srne
    id: rated_charging_current
    name: ${name}_rated_charging_current
    address: 0x000A
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 0
    icon: mdi:current-dc
    unit_of_measurement: "A"
    bitmask: 0x00FF #(Bits 7-0)

  - platform: modbus_controller
    modbus_controller_id: srne
    id: rated_discharging_current
    name: ${name}_rated_discharging_current
    address: 0x000B
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 0
    icon: mdi:current-dc
    unit_of_measurement: "A"
    bitmask: 0xFF00 #(Bits 15-8)  

  - platform: modbus_controller
    modbus_controller_id: srne
    id: software_version
    name: ${name}_software_version
    register_type: holding
    address: 0x014
    value_type: U_DWORD
    #response_size: 4
    register_count: 2
    skip_updates: 1
    #raw_encode: NONE   

  - platform: modbus_controller
    modbus_controller_id: srne
    id: hardware_version
    name: ${name}_hardware_version
    register_type: holding
    address: 0x016
    #response_size: 4
    value_type: U_DWORD
    #response_size: 4
    register_count: 2
    #raw_encode: NONE    

  - platform: modbus_controller
    modbus_controller_id: srne
    id: product_serial_number
    name: ${name}_product_serial_number
    register_type: holding
    address: 0x018
    value_type: U_DWORD
    #response_size: 4
    register_count: 2
    #response_size: 4
    #raw_encode: NONE

  - platform: modbus_controller
    modbus_controller_id: srne
    id: modbus_adress
    name: ${name}_modbus_adress
    register_type: holding
    address: 0x01A
    value_type: U_WORD
    bitmask: 0xFF #(Bits 7-0)
    skip_updates: 1
    icon: mdi:numeric


      ################ Controller dynamic information# ##############################

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_soc
    name: ${name}_battery_soc
    address: 0x100
    unit_of_measurement: "%"
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    icon: mdi:percent
    skip_updates: 1  

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_voltage
    name: ${name}_battery_voltage
    address: 0x101
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1 
    icon: mdi:sine-wave
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: srne
    id: charging_current
    name: ${name}_charging_current
    address: 0x102
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:current-dc
    unit_of_measurement: "A"
    filters:
      - multiply: 0.01

  - platform: template
    id: charging_power
    name: ${name}_charging_power
    accuracy_decimals: 1
    icon: mdi:power
    unit_of_measurement: "W"
    update_interval: 2s
    lambda: |-
      return id(charging_current).state*id(battery_voltage).state;

  - platform: template
    id: pv_battery_ratio
    name: ${name}_pv_battery_ratio
    accuracy_decimals: 1
    unit_of_measurement: "%"
    icon: mdi:percent
    update_interval: 2s
    lambda: |-
      if (id(solar_panel_power).state != 0.0) {
        return (id(charging_power).state/id(solar_panel_power).state)*100.0;    
      }
      else{
        return 0;
      }
  - platform: total_daily_energy
    name: ${name}_charging_power_total_day
    power_id: charging_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: charging_power_total_day
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_charging_power_total_veille
    id: template_charging_power_total_veille
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${updates}
    lambda: |-
      return (id(template_charging_power_total_veille).state = id(charging_power_total_veille_global));

  - platform: modbus_controller
    modbus_controller_id: srne
    id: device_temperature
    name: ${name}_device_temperature
    address: 0x103
    unit_of_measurement: "°C"
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    icon: mdi:thermometer
    bitmask: 0x7F00 #(Bits 14-8)

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_temperature
    name: ${name}_battery_temperature
    address: 0x103
    unit_of_measurement: "°C"
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    icon: mdi:thermometer
    bitmask: 0x7F #(Bits 7-0)

  - platform: modbus_controller
    modbus_controller_id: srne
    id: load_dc_voltage
    name: ${name}_load_dc_voltage
    address: 0x104
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1 
    icon: mdi:sine-wave
    filters:
      - multiply: 0.1
  
  - platform: modbus_controller
    modbus_controller_id: srne
    id: load_dc_current
    name: ${name}_load_dc_current
    address: 0x105
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:current-dc
    unit_of_measurement: "A"
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: srne
    id: load_dc_power
    name: ${name}_load_dc_power
    address: 0x106
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:power
    unit_of_measurement: "W" 

         ############################## Solar Panel Informations ##################

  - platform: modbus_controller
    modbus_controller_id: srne
    id: solar_panel_voltage
    name: ${name}_solar_panel_voltage
    address: 0x107
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1 
    icon: mdi:sine-wave
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: srne
    id: solar_panel_current
    name: ${name}_solar_panel_current
    address: 0x108
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:current-dc
    unit_of_measurement: "A"
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: srne
    id: solar_panel_power
    name: ${name}_solar_panel_power
    address: 0x109
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:power
    unit_of_measurement: "W" 


  - platform: total_daily_energy
    name: ${name}_pv_power_total_day
    power_id: solar_panel_power 
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: pv_power_total_day
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_pv_power_total_veille
    id: template_pv_power_total_veille
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: ${updates}
    lambda: |-
      return (id(template_pv_power_total_veille).state = id(pv_power_total_veille_global));

  - platform: modbus_controller
    modbus_controller_id: srne
    id: load_dc_charging_status
    name: ${name}_load_dc_charging_status
    address: 0x010A
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    skip_updates: 1
    bitmask: 1
    icon: mdi:account-hard-hat
    
   
        ############################## Battery statistics  ############################

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_minimum_voltage_current_day
    name: ${name}_battery_minimum_voltage_current_day
    address: 0x010B
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1 
    icon: mdi:sine-wave
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_maximumvoltage_current_day
    name: ${name}_battery_maximum_voltage_current_day
    address: 0x010C
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1 
    icon: mdi:sine-wave
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_maximum_charging_current_day
    name: ${name}_battery_maximum_charging_current_day
    address: 0x010D
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:current-dc
    unit_of_measurement: "A"
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_maximum_discharging_current_day
    name: ${name}_battery_maximum_discharging_current_day
    address: 0x010E
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:current-dc
    unit_of_measurement: "A"
    filters:
      - multiply: 0.01
      
  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_maximum_charging_power_current_day
    name: ${name}_battery_maximum_charging_power_current_day
    address: 0x010F
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:power
    unit_of_measurement: "W"

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_maximum_discharging_power_current_day
    name: ${name}_battery_maximum_discharging_power_current_day
    address: 0x0110
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:power
    unit_of_measurement: "W"

    - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_maximum_charging_amp_day
    name: ${name}_battery_maximum_charging_amp_day
    address: 0x0111
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 1
    icon: mdi:power
    unit_of_measurement: "A"

  - platform: modbus_controller
    modbus_controller_id: srne
    id: power_generation_current_day
    name: ${name}_power_generation_current_day
    address: 0x0113
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 2
    icon: mdi:power
    unit_of_measurement: "kWh"
    filters:
      - multiply: 0.001   

  - platform: modbus_controller
    modbus_controller_id: srne
    id: power_consumption_current_day
    name: ${name}_power_consumption_current_day
    address: 0x0114
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 2
    icon: mdi:power
    unit_of_measurement: "kWh"
    filters:
      - multiply: 0.001       
  
       #################### Historical data information ##################

  - platform: modbus_controller
    modbus_controller_id: srne
    id: total_number_operating_day
    name: ${name}_total_number_operating_day
    address: 0x0115
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 0
    icon: mdi:calendar-today

  - platform: modbus_controller
    modbus_controller_id: srne
    id: total_number_battery_overdischarge
    name: ${name}_total_number_battery_overdischarge
    address: 0x0116
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 0
    icon: mdi:flash-alert 

  - platform: modbus_controller
    modbus_controller_id: srne
    id: total_number_battery_fullcharge
    name: ${name}_total_number_battery_fullcharge
    address: 0x0117
    register_type: holding
    value_type: U_WORD
    skip_updates: 1 
    accuracy_decimals: 0
    icon: mdi:battery-charging-high

  - platform: modbus_controller
    modbus_controller_id: srne
    id: total_charging_ah_battery
    name: ${name}_total_charging_ah_battery
    address: 0x0118
    register_type: holding
    value_type: U_DWORD
    skip_updates: 1 
    accuracy_decimals: 0
    icon: mdi:power
    unit_of_measurement: "AH"   

  - platform: modbus_controller
    modbus_controller_id: srne
    id: total_discharging_ah_battery
    name: ${name}_total_discharging_ah_battery
    address: 0x011A
    register_type: holding
    value_type: U_DWORD
    skip_updates: 1 
    accuracy_decimals: 0
    icon: mdi:power
    unit_of_measurement: "AH"     
    
    
  - platform: modbus_controller
    modbus_controller_id: srne
    id: power_generation_total
    name: ${name}_power_generation_total
    address: 0x011C
    register_type: holding
    value_type: U_DWORD
    skip_updates: 1 
    accuracy_decimals: 2
    icon: mdi:power
    unit_of_measurement: "kWh"
    filters:
      - multiply: 0.001


  - platform: modbus_controller
    modbus_controller_id: srne
    id: power_consumption_total
    name: ${name}_power_consumption_total
    address: 0x011E
    register_type: holding
    value_type: U_DWORD
    skip_updates: 1 
    accuracy_decimals: 2
    icon: mdi:power
    unit_of_measurement: "kWh"
    filters:
      - multiply: 0.001    


  - platform: modbus_controller
    modbus_controller_id: srne
    id: warnings_and_errors_hi
    name: ${name}_warnings_and_errors_hi 
    icon: mdi:alert-circle
    address: 0x0121
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    lambda: |-
       //ESP_LOGD("Register 0x0121","Lambda incoming value=%d - data array size is %d",int(x),data.size());
       id(warnings_and_errors_hi_template).publish_state(int(x));
       return x;
   

  - platform: template
    id: warnings_and_errors_hi_template
    #name: ${name}_warnings_and_errors_hi_template 
    icon: mdi:alert-circle
    accuracy_decimals: 0
    #update_interval: ${updates}
    on_value:
      then: 
        - script.execute: 
            id: warnings_and_errors_hi_script

  - platform: modbus_controller
    modbus_controller_id: srne
    id: warnings_and_errors_low
    name: ${name}_warnings_and_errors_low 
    icon: mdi:alert-circle
    address: 0x0122
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    lambda: |-
       //ESP_LOGD("Register 0x0122","Lambda incoming value=%d - data array size is %d",int(x),data.size());
       id(warnings_and_errors_low_template).publish_state(int(x));
       return x;
   

  - platform: template
    id: warnings_and_errors_low_template
    #name: ${name}_warnings_and_errors_low_template 
    icon: mdi:alert-circle
    accuracy_decimals: 0
    #update_interval: ${updates}
    on_value:
      then: 
        - script.execute: 
            id: warnings_and_errors_low_script         

             ################## Load informations  ####################
  
  - platform: modbus_controller
    modbus_controller_id: srne
    id: street_light_status
    name: ${name}_street_light
    icon: mdi:outdoor-lamp
    bitmask: 0x8000
    register_type: holding
    value_type: U_DWORD
    skip_updates: 1
    accuracy_decimals: 0
    address: 0x0120

  - platform: modbus_controller
    modbus_controller_id: srne
    id: street_brightness_level
    name: ${name}_street_brightness_level
    icon: mdi:outdoor-lamp
    bitmask: 0x7F00
    register_type: holding
    value_type: U_DWORD
    skip_updates: 1 
    accuracy_decimals: 0
    address: 0x0120  
    

       ############################ Battery parameters ###################

  - platform: modbus_controller
    modbus_controller_id: srne
    id: charging_current_limit
    name: ${name}_charging_current_limit
    address: 0xE001
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: 'A'
    icon: mdi:current-dc
    accuracy_decimals: 0
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_capacity
    name: ${name}_battery_capacity
    address: 0xE002
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: 'Ah'
    icon: mdi:car-battery
    accuracy_decimals: 0
     
  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_voltage_setting
    name: ${name}_battery_voltage_setting
    address: 0xE003
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    bitmask: 0xFF00 #(Bits 15-8)
    accuracy_decimals: 0
    unit_of_measurement: "V"
    icon: mdi:car-battery  

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_voltage_recognized
    name: ${name}_battery_voltage_recognized
    address: 0xE003
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    bitmask: 0xFF #(Bits 15-8)
    accuracy_decimals: 0
    unit_of_measurement: "V"
    icon: mdi:car-battery
    lambda: |-
      //ESP_LOGD("RegE003 sensor", "raw value (%d)", (int)x);
      id(battery_reco_global) = (int)x;
      return {};

  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_type
    name: ${name}_battery_type
    address: 0xE004
    register_type: holding
    value_type: U_WORD
    skip_updates: 1
    icon: mdi:car-battery 
      
  ################# Battery voltage sensors ##########
    
          ########  1 ########

  - platform: modbus_controller
    modbus_controller_id: srne
    id: over_voltage_threshold
    name: ${name}_over_voltage_threshold
    address: 0xE005
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave
 
          ########  2 ########

  - platform: modbus_controller
    modbus_controller_id: srne
    id: charging_voltage_limit
    name: ${name}_charging_voltage_limit
    address: 0xE006
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave        

              ########  3 ########
  
  - platform: modbus_controller
    modbus_controller_id: srne
    id: equalizing_charge_voltage
    name: ${name}_equalizing_charge_voltage
    address: 0xE007
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave    

            ########  4 ########        
  
  - platform: modbus_controller
    modbus_controller_id: srne
    id: boost_voltage
    name: ${name}_boost_voltage
    address: 0xE008
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave

          ######## 5 ########
   
  - platform: modbus_controller
    modbus_controller_id: srne
    id: float_voltage
    name: ${name}_float_voltage
    address: 0xE009
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave 

            ######## 6 ########

  - platform: modbus_controller
    modbus_controller_id: srne
    id: boost_charging_recovery_voltage
    name: ${name}_boost_charging_recovery_voltage
    address: 0xE00A
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave 

              ######## 7 ########

  - platform: modbus_controller
    modbus_controller_id: srne
    id: over_discharge_recovery_voltage
    name: ${name}_over_discharge_recovery_voltage
    address: 0xE00B
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave  

            ######## 8 ########

  - platform: modbus_controller
    modbus_controller_id: srne
    id: under_voltage_warning
    name: ${name}_under_voltage_warning
    address: 0xE00C
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave   

        ######## 9 ########

  - platform: modbus_controller
    modbus_controller_id: srne
    id: over_discharge_voltage
    name: ${name}_over_discharge_voltage
    address: 0xE00D
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave 

        ######## 10 ########

  - platform: modbus_controller
    modbus_controller_id: srne
    id: discharge_limit_voltage
    name: ${name}_discharge_limit_voltage
    address: 0xE00E
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    skip_updates: 1
    # filters:
    #   - multiply: 0.1
    lambda: |-
      return x*0.1*id(battery_coefficient);  
    icon: mdi:sine-wave    

      ############## Delay  ##############
  
  - platform: modbus_controller
    id: overdischarge_time_delay
    name: ${name}_overdischarge_time_delay
    address: 0xE010
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    unit_of_measurement: "s"
    icon: mdi:timer-sand
    skip_updates: 1
    
  - platform: modbus_controller
    id: equalizing_charging_time
    name: ${name}_equalizing_charging_time
    address: 0xE011
    value_type: U_WORD
    register_type: holding
    unit_of_measurement: "min"
    icon: mdi:timer-sand
    accuracy_decimals: 0
    skip_updates: 1

  - platform: modbus_controller
    id: boost_charging_time
    name: ${name}_boost_charging_time
    address: 0xE012
    value_type: U_WORD
    register_type: holding
    unit_of_measurement: "min"
    icon: mdi:timer-sand
    accuracy_decimals: 0
    skip_updates: 1

  - platform: modbus_controller
    id: equalizing_charging_interval
    name: ${name}_equalizing_charging_interval
    address: 0xE013
    value_type: U_WORD
    register_type: holding
    unit_of_measurement: "day"
    icon: mdi:timer-sand
    accuracy_decimals: 0
    skip_updates: 1 

  - platform: modbus_controller
    modbus_controller_id: srne
    id: temperature_compensation_factor
    name: ${name}_temperature_compensation_factor
    address: 0xE014
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    unit_of_measurement: "mV/°C/2V"
    icon: mdi:thermometer
    skip_updates: 1
    filters:
      - multiply: -1

  - platform: modbus_controller
    modbus_controller_id: srne
    id: load_working_mode
    name: ${name}_load_working_mode
    address: 0xE01D
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    icon: mdi:account-hard-hat
    skip_updates: 1

      
  
  - platform: wifi_signal
    name: WIFI_puissance_${name}
    update_interval: ${updates}           


switch:
  
  - platform: modbus_controller
    modbus_controller_id: srne
    id: load_on_off_command
    name: ${name}_load_on_off_command
    register_type: holding
    address: 0x010A
    bitmask: 1

  - platform: template
    id: load_dc_on_off_command
    name: ${name}_load_dc_on_off_command
    optimistic: true
    turn_on_action:
      - script.execute: turn_on_dc_load_script
    turn_off_action:
      - script.execute: turn_off_dc_load_script

  - platform: restart
    name: restart_${name}
    id: restart_srne    

select:

  - platform: template
    id: battery_voltage_setting_select
    name: ${name}_battery_voltage_setting_select 
    optimistic: true
    options:
      - '12V'
      - '24V'
      - '36V'
      - '48V'
      - 'User defined'
    initial_option: '48V'
    restore_value: true
    icon: mdi:car-battery
    on_value:
      then: 
        - lambda: !lambda |-
            id(battery_coefficient) = (i + 1);
        - script.execute: update_template_numbers_script 
        - script.execute: 
            id: write_E003_register_script
            # current_controller: id(srne)

  - platform: modbus_controller
    modbus_controller_id: srne
    id: load_charging_mode_select
    name: ${name}_load_charging_mode_select
    address: 0xE01D
    value_type: U_WORD
    icon: mdi:list-status
    optionsmap:
      "Sole control, light control over on/off of load": 0
      "Load turned on by light control and goes off after +1h": 1
      "Load turned on by light control and goes off after +2h": 2
      "Load turned on by light control and goes off after +3h": 3
      "Load turned on by light control and goes off after +4h": 4
      "Load turned on by light control and goes off after +5h": 5
      "Load turned on by light control and goes off after +6h": 6
      "Load turned on by light control and goes off after +7h": 7
      "Load turned on by light control and goes off after +8h": 8
      "Load turned on by light control and goes off after +9h": 9
      "Load turned on by light control and goes off after +10h": 10
      "Load turned on by light control and goes off after +11h": 11
      "Load turned on by light control and goes off after +12h": 12
      "Load turned on by light control and goes off after +13h": 13
      "Load turned on by light control and goes off after +14h": 14
      "Manual mode": 15
      "Debugging mode": 16
      "Normal mode": 17
  
 
  - platform: modbus_controller
    modbus_controller_id: srne
    id: battery_type_select
    name: ${name}_battery_type_select
    address: 0xE004
    value_type: U_WORD
    icon: mdi:car-battery
    optionsmap:
      "User defined": 0
      "Open (FLD)": 1
      "Sealed (SLD)": 2
      "Gel": 3
      "Lithium": 4

number: 
      ############## Delay  ##############
      
  - platform: modbus_controller
    id: overdischarge_time_delay_number
    name: ${name}_overdischarge_time_delay_number
    address: 0xE010
    value_type: U_WORD
    unit_of_measurement: "s"
    icon: mdi:timer-sand
    min_value: 0
    max_value: 120
    step:  1
    mode: 'slider'

  - platform: modbus_controller
    id: equalizing_charging_time_number
    name: ${name}_equalizing_charging_time_number
    address: 0xE011
    value_type: U_WORD
    unit_of_measurement: "min"
    icon: mdi:timer-sand
    min_value: 0
    max_value: 300
    step:  10
    mode: 'slider'

  - platform: modbus_controller
    id: boost_charging_time_number
    name: ${name}_boost_charging_time_number
    address: 0xE012
    value_type: U_WORD
    unit_of_measurement: "min"
    icon: mdi:timer-sand
    min_value: 0
    max_value: 300
    step:  10
    mode: 'slider'

  - platform: modbus_controller
    id: equalizing_charging_interval_number
    name: ${name}_equalizing_charging_interval_number
    address: 0xE013
    value_type: U_WORD
    unit_of_measurement: "day"
    icon: mdi:timer-sand
    min_value: 0
    max_value: 255
    step:  5
    mode: 'slider'  


  - platform: modbus_controller
    id: temperature_compensation_coefficient_number
    name: ${name}_temperature_compensation_coefficient_number
    address: 0xE014
    value_type: U_WORD
    unit_of_measurement: "mV/°C/2V"
    icon: mdi:thermometer
    min_value: -5
    max_value: 0
    step:  1
    multiply: -1
    mode: 'slider'  

           ################# Battery's voltages ##############

             ######### 1 #########

  - platform: template
    id: over_voltage_threshold_number
    name: ${name}_over_voltage_threshold_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 14
    max_value: 16
    step:  0.1
    initial_value: 15
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script
  
             ######### 2 #########
  
  - platform: template
    id: charging_voltage_limit_number
    name: ${name}_charging_voltage_limit_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 14
    max_value: 15.5
    step: 0.1
    initial_value: 14.9
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script
  
            ######### 3 #########

  - platform: template
    id: equalizing_charge_voltage_number
    name: ${name}_equalizing_charge_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 12
    max_value: 14.5
    step: 0.1
    initial_value: 14
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script              

           ######### 4 #########
 
  - platform: template
    id: boost_voltage_number
    name: ${name}_boost_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 12
    max_value: 14.5
    step: 0.1
    initial_value: 14
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script

           ######### 5 #########

  - platform: template
    id: float_voltage_number
    name: ${name}_float_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 12
    max_value: 14.5
    step: 0.1
    initial_value: 14
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script     
         
             ######### 6 #########

  - platform: template
    id: boost_charging_recovery_voltage_number
    name: ${name}_boost_charging_recovery_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 12
    max_value: 14.5
    step: 0.1
    initial_value: 14
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script

           ######### 7 #########

  - platform: template
    id: over_discharge_recovery_voltage_number
    name: ${name}_over_discharge_recovery_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 11
    max_value: 13
    step: 0.1
    initial_value: 12.6
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script

         ######### 8 #########

  - platform: template
    id: under_voltage_warning_number
    name: ${name}_under_voltage_warning_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 11
    max_value: 12.6
    step: 0.1
    initial_value: 12.0
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script 

         ######### 9 #########

  - platform: template
    id: over_discharge_voltage_number
    name: ${name}_over_discharge_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 10
    max_value: 12
    step: 0.1
    initial_value: 11.1
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script 

         ######### 10 #########

  - platform: template
    id: discharge_limit_voltage_number
    name: ${name}_discharge_limit_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 9.8
    max_value: 12
    step:  0.1
    initial_value: 10.1
    restore_value: true
    mode: 'slider'
    on_value:
      then: 
        - script.execute: write_E005_E00E_registers_script

     ############ Charging current ##########
  
  - platform: modbus_controller
    modbus_controller_id: srne
    id: charging_current_limit_number
    name: ${name}_charging_current_limit_number
    address: 0xE001
    value_type: U_WORD
    unit_of_measurement: 'A'
    icon: mdi:current-dc
    min_value: 5
    max_value: 60
    step:  5
    mode: 'slider'
    multiply: 100

  - platform: modbus_controller
    id: battery_capacity_number
    name: ${name}_battery_capacity_number
    address: 0xE002
    value_type: U_WORD
    unit_of_measurement: 'Ah'
    icon: mdi:car-battery
    min_value: 50
    max_value: 1000
    step:  10
    mode: 'slider'  
            

  # - platform: modbus_controller
  #   modbus_controller_id: srne
  #   id: boost_voltage_number
  #   name: ${name}_boost_voltage_number
  #   address: 0xE008
  #   value_type: U_WORD
  #   unit_of_measurement: 'V'
  #   icon: mdi:sine-wave
  #   min_value: 48  
  #   max_value: 58
  #   step:  0.4
  #   mode: 'slider'
  #   multiply: 2.5
    # lambda: |-
    #   return (x*0.1*id(battery_coefficient));
    # write_lambda: |-
    #   ESP_LOGD("main","Modbus Number incoming value = %f",x);
    #   uint16_t b_capacity = (x*10)/id(battery_coefficient) ;
    #   payload.push_back(b_capacity);
    #   return x * 1.0 ;
    # write_lambda: |-
    #   return ((x*10)/id(battery_coefficient));



text_sensor:
  - platform: modbus_controller
    modbus_controller_id: srne
    id: product_type
    name: ${name}_product_type
    bitmask: 0
    register_type: holding
    address: 0x00B
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Controller");
        case 1: return std::string("Inverter");
        default: return std::string("Unknown");
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: srne
    id: charging_mode
    name: ${name}_charging_mode
    icon: mdi:list-status
    #bitmask: 0
    register_type: holding
    address: 0x0120
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Charging desactivated");
        case 1: return std::string("Charging activated");
        case 2: return std::string("MPPT charge mode");
        case 3: return std::string("Equalizing charge mode");
        case 4: return std::string("Boost charge mode");
        case 5: return std::string("Float charge mode");
        case 6: return std::string("Current limiting");
        default: return std::string("Unknown");
      }
      return x;    

  - platform: modbus_controller
    modbus_controller_id: srne
    id: product_model
    name: ${name}_product_model
    register_type: holding
    address: 0x00C
    response_size: 16
    raw_encode: NONE
  
  - platform: template
    id: warnings_and_errors_hi_text
    name: ${name}_warnings_and_errors_hi_text
    icon: mdi:alert-circle

  - platform: template
    id: warnings_and_errors_low_text
    name: ${name}_warnings_and_errors_low_text
    icon: mdi:alert-circle  

  - platform: template
    name: ${name}_battery_type_text
    id: charger_status_text
    icon: mdi:car-battery
    update_interval: ${updates}
    lambda: |-
      if (isnan(id(battery_type).state)) { 
        return {"KO"};
      }
      else {
        static const char *battery_list[] = {"User defined","Open (FLD)", "Sealed (SLD)", "Gel" , "Lithium"};
        return {battery_list[int(id(battery_type).state)]};
      }      
  - platform: template
    name: ${name}_uptime_total # Temps total depuis le démarrage de la carte
    lambda: |-
      int seconds = (id(uptime_sec).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds / 60;
      seconds = seconds % 60;
      if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s ").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s ").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s ").c_str() };
      } else {
        return { (String(seconds) +"s ").c_str() };
      }
    icon: mdi:clock-start
    update_interval: 113s


script:

  - id: warnings_and_errors_hi_script
    then:
      - lambda: |-
          bool first = true;
          const uint16_t mask = (id(warnings_and_errors_hi_template).state);
          std::string errors_list = "";
          static const char *const ERRORS_HI[16] = {
              "Reserved",                                  // Byte 0.0, warning
              "Reserved",                                  // Byte 0.1, alarm
              "Reserved",                                  // Byte 0.2, alarm
              "Reserved",                                  // Byte 0.3, alarm
              "Reserved",                                  // Byte 0.4, alarm
              "Reserved",                                  // Byte 0.5, alarm
              "Main power supply"      ,                   // Byte 0.6, alarm
              "No battery detected",                                            // Byte 0.7, alarm
              "Battery high temperature protection => prohibit charging",       // Byte 1.0, alarm
              "Battery low temperature protection => prohibit charging",        // Byte 1.1, alarm
              "Overcharge protection=>no charging",                             // Byte 1.2, alarm
              "Battery low temperature protection > stopping charging",         // Byte 1.3, alarm
              "Battery reversly connected",                                     // Byte 1.4, alarm
              "Capacitor overvoltage",                                          // Byte 1.5, alarm
              "Induction probe damaged (street light)",                         // Byte 1.6, alarm
              "Load open circuit (street light)",                                // Byte 1.7, alarm
              };
          if (mask) {
            for (int i = 0; i < 16; i++) {
              if (mask & (1 << i)) {
                if (first) {
                  first = false;
                } 
                else {
                  errors_list.append(";");
                }
              errors_list.append(ERRORS_HI[i]);
              }
            }
          }
          id(warnings_and_errors_hi_text).publish_state(errors_list);
          

  - id: warnings_and_errors_low_script
    then:
      - lambda: |-
          bool first = true;
          const uint16_t mask = (id(warnings_and_errors_low_template).state);
          std::string errors_list = "";
          static const char *const ERRORS_LOW[16] = {
              "Battery overdischarge",                                  // Byte 0.0, warning
              "Battery overvoltage",                                  // Byte 0.1, alarm
              "Battery undervoltage",                                  // Byte 0.2, alarm
              "Load short-circuit",                                  // Byte 0.3, alarm
              "Load overpower",                                  // Byte 0.4, alarm
              "Controller temperature too high",                                  // Byte 0.5, alarm
              "Battery high temperature protection => prohibit charging"      ,                   // Byte 0.6, alarm
              "Photovoltaic input overpower",                                            // Byte 0.7, alarm
              "Reserved",       // Byte 1.0, alarm
              "Photovoltaic input overvoltage",        // Byte 1.1, alarm
              "Reserved",                             // Byte 1.2, alarm
              "Photovoltaic working point overvoltage",         // Byte 1.3, alarm
              "Solar panel reversly connected",                                     // Byte 1.4, alarm
              "Reserved",                                          // Byte 1.5, alarm
              "Reserved",                         // Byte 1.6, alarm
              "Reserved",                                // Byte 1.7, alarm
              };
          if (mask) {
            for (int i = 0; i < 16; i++) {
              if (mask & (1 << i)) {
                if (first) {
                  first = false;
                } 
                else {
                  errors_list.append(";");
                }
              errors_list.append(ERRORS_LOW[i]);
              }
            }
          }
          id(warnings_and_errors_low_text).publish_state(errors_list);
          


  - id: turn_on_dc_load_script
    then:
      - globals.set:
                id: current_load_charging_mode_global
                value: !lambda return ( id(current_load_charging_mode_global) =  int( id(load_working_mode).state) );
      - delay: 200ms
      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(srne);
          std::vector<uint16_t> register_settings(1);
          register_settings[0]  = uint16_t(15); //go in manual mode <=> write 15 in 0xE01D
          //ESP_LOGD("script","value to be written in E01D = %d",register_settings[0]);
          esphome::modbus_controller::ModbusCommandItem register_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0xE01D, register_settings.size() ,
                                                                                          register_settings);
          delay(200);
          controller->queue_command(register_command);
          delay(200); 
      - delay: 3s
      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(srne);
          std::vector<uint16_t> register_settings(1);
          register_settings[0]  = uint16_t(1); //turn on dc load  <=> write 1 in 0x010A
          ESP_LOGD("script turn on regx010A","value to be written in x010A = %d",register_settings[0]);
          esphome::modbus_controller::ModbusCommandItem register_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x010A, register_settings.size() ,
                                                                                          register_settings);
          delay(200);
          controller->queue_command(register_command);
          delay(200);              

  - id: turn_off_dc_load_script
    then:
      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(srne);
          std::vector<uint16_t> register_settings(1);
          register_settings[0]  = uint16_t(0); //turn off dc load  <=> write 1 in 0x010A
          ESP_LOGD("script turn off regx010A","value to be written in 010A = %d",register_settings[0]);
          esphome::modbus_controller::ModbusCommandItem register_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x010A, register_settings.size() ,
                                                                                          register_settings);
          delay(200);
          controller->queue_command(register_command);
          delay(200);                       

      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(srne);
          std::vector<uint16_t> register_settings(1);
          register_settings[0]  = uint16_t(id(current_load_charging_mode_global)); //return in previous mode <=> write in 0xE01D
          //ESP_LOGD("script","value to be written in E01D = %d",register_settings[0]);
          esphome::modbus_controller::ModbusCommandItem register_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0xE01D, register_settings.size() ,
                                                                                          register_settings);
          delay(200);
          controller->queue_command(register_command);
          delay(200); 
      
  - id: update_template_numbers_script
    then:
      - lambda: |-
            id(over_voltage_threshold_number).traits.set_min_value(14*id(battery_coefficient));
            id(over_voltage_threshold_number).traits.set_max_value(16*id(battery_coefficient));
            id(over_voltage_threshold_number).traits.set_step(0.1*id(battery_coefficient));
            
            id(charging_voltage_limit_number).traits.set_min_value(14*id(battery_coefficient));
            id(charging_voltage_limit_number).traits.set_max_value(15.5*id(battery_coefficient));
            id(charging_voltage_limit_number).traits.set_step(0.1*id(battery_coefficient));

            id(equalizing_charge_voltage_number).traits.set_min_value(12*id(battery_coefficient));
            id(equalizing_charge_voltage_number).traits.set_max_value(14.5*id(battery_coefficient));
            id(equalizing_charge_voltage_number).traits.set_step(0.1*id(battery_coefficient));

            id(boost_voltage_number).traits.set_min_value(12*id(battery_coefficient));
            id(boost_voltage_number).traits.set_max_value(14.5*id(battery_coefficient));
            id(boost_voltage_number).traits.set_step(0.1*id(battery_coefficient));

            id(float_voltage_number).traits.set_min_value(12*id(battery_coefficient));
            id(float_voltage_number).traits.set_max_value(14.5*id(battery_coefficient));
            id(float_voltage_number).traits.set_step(0.1*id(battery_coefficient));

            id(boost_charging_recovery_voltage_number).traits.set_min_value(12*id(battery_coefficient));
            id(boost_charging_recovery_voltage_number).traits.set_max_value(14.5*id(battery_coefficient));
            id(boost_charging_recovery_voltage_number).traits.set_step(0.1*id(battery_coefficient));

            id(over_discharge_recovery_voltage_number).traits.set_min_value(11*id(battery_coefficient));
            id(over_discharge_recovery_voltage_number).traits.set_max_value(13*id(battery_coefficient));
            id(over_discharge_recovery_voltage_number).traits.set_step(0.1*id(battery_coefficient));

            id(under_voltage_warning_number).traits.set_min_value(11*id(battery_coefficient));
            id(under_voltage_warning_number).traits.set_max_value(12.6*id(battery_coefficient));
            id(under_voltage_warning_number).traits.set_step(0.1*id(battery_coefficient));

            id(over_discharge_voltage_number).traits.set_min_value(10*id(battery_coefficient));
            id(over_discharge_voltage_number).traits.set_max_value(12*id(battery_coefficient));
            id(over_discharge_voltage_number).traits.set_step(0.1*id(battery_coefficient));

            id(discharge_limit_voltage_number).traits.set_min_value(9.8*id(battery_coefficient));
            id(discharge_limit_voltage_number).traits.set_max_value(12*id(battery_coefficient));
            id(discharge_limit_voltage_number).traits.set_step(0.1*id(battery_coefficient));

      - number.set:
          id: over_voltage_threshold_number
          value: !lambda |- 
              return float(id(over_voltage_threshold_number).state*id(battery_coefficient));
      - number.set:
          id: charging_voltage_limit_number
          value: !lambda |- 
              return float(id(charging_voltage_limit_number).state*id(battery_coefficient));
      - number.set:
          id: equalizing_charge_voltage_number
          value: !lambda |- 
              return float(id(equalizing_charge_voltage_number).state*id(battery_coefficient));                
      - number.set:
          id: boost_voltage_number
          value: !lambda |- 
              return float(id(boost_voltage_number).state*id(battery_coefficient)); 
      - number.set:
          id: float_voltage_number
          value: !lambda |- 
              return float(id(float_voltage_number).state*id(battery_coefficient));
      - number.set:
          id: boost_charging_recovery_voltage_number
          value: !lambda |- 
              return float(id(boost_charging_recovery_voltage_number).state*id(battery_coefficient));
      - number.set:
          id: over_discharge_recovery_voltage_number
          value: !lambda |- 
              return float(id(over_discharge_recovery_voltage_number).state*id(battery_coefficient));                           
      - number.set:
          id: under_voltage_warning_number
          value: !lambda |- 
              return float(id(under_voltage_warning_number).state*id(battery_coefficient));
      - number.set:
          id: over_discharge_voltage_number
          value: !lambda |- 
              return float(id(over_discharge_voltage_number).state*id(battery_coefficient));
      - number.set:
          id: discharge_limit_voltage_number
          value: !lambda |- 
              return float(id(discharge_limit_voltage_number).state*id(battery_coefficient));                

  - id: write_E003_register_script
    # parameters:
    #   current_controller: "esphome::modbus_controller::ModbusController *"
    then:
      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(srne);
          //esphome::modbus_controller::ModbusController *controller = current_controller;
          std::vector<uint16_t> battery_settings(1);
          battery_settings[0]  = uint16_t( 3072*id(battery_coefficient)  + id(battery_reco_global));
          //ESP_LOGD("script","value to be written in E003 = %d",battery_settings[0]);
          esphome::modbus_controller::ModbusCommandItem battery_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0xE003, battery_settings.size() ,
                                                                                          battery_settings);
          delay(200);
          controller->queue_command(battery_command);
          delay(200);


  - id: write_E005_E00E_registers_script
    then:
      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(srne);
          //esphome::modbus_controller::ModbusController *controller = current_controller;
          std::vector<uint16_t> battery_settings(10);
          battery_settings[0]  = uint16_t(( (id(over_voltage_threshold_number).state)*10)/id(battery_coefficient) );
          battery_settings[1]  = uint16_t(( (id(charging_voltage_limit_number).state)*10)/id(battery_coefficient) );
          battery_settings[2]  = uint16_t(( (id(equalizing_charge_voltage_number).state)*10)/id(battery_coefficient) );
          battery_settings[3]  = uint16_t(( (id(boost_voltage_number).state)*10)/id(battery_coefficient) );
          battery_settings[4]  = uint16_t(( (id(float_voltage_number).state)*10)/id(battery_coefficient) );
          battery_settings[5]  = uint16_t(( (id(boost_charging_recovery_voltage_number).state)*10)/id(battery_coefficient) );
          battery_settings[6]  = uint16_t(( (id(over_discharge_recovery_voltage_number).state)*10)/id(battery_coefficient) );
          battery_settings[7]  = uint16_t(( (id(under_voltage_warning_number).state)*10)/id(battery_coefficient) );
          battery_settings[8]  = uint16_t(( (id(over_discharge_voltage_number).state)*10)/id(battery_coefficient) );
          battery_settings[9]  = uint16_t(( (id(discharge_limit_voltage_number).state)*10)/id(battery_coefficient) );
          
          esphome::modbus_controller::ModbusCommandItem battery_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0xE005, battery_settings.size() ,
                                                                                          battery_settings);
          delay(200);
          controller->queue_command(battery_command);
          delay(200);        
